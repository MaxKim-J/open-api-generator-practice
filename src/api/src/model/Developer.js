/**
 * Simple Developer API
 * Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Developer model module.
 * @module model/Developer
 * @version 1.0.0
 */
class Developer {
    /**
     * Constructs a new <code>Developer</code>.
     * @alias module:model/Developer
     * @param id {Number} 
     * @param name {String} 
     * @param age {Number} 
     * @param position {module:model/Developer.PositionEnum} 
     * @param major {String} 
     */
    constructor(id, name, age, position, major) { 
        
        Developer.initialize(this, id, name, age, position, major);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, age, position, major) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['age'] = age;
        obj['position'] = position;
        obj['major'] = major;
    }

    /**
     * Constructs a <code>Developer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Developer} obj Optional instance to populate.
     * @return {module:model/Developer} The populated <code>Developer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Developer();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('major')) {
                obj['major'] = ApiClient.convertToType(data['major'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Developer.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Developer.prototype['name'] = undefined;

/**
 * @member {Number} age
 */
Developer.prototype['age'] = undefined;

/**
 * @member {module:model/Developer.PositionEnum} position
 */
Developer.prototype['position'] = undefined;

/**
 * @member {String} major
 */
Developer.prototype['major'] = undefined;





/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Developer['PositionEnum'] = {

    /**
     * value: "frontend"
     * @const
     */
    "frontend": "frontend",

    /**
     * value: "backend"
     * @const
     */
    "backend": "backend",

    /**
     * value: "devops"
     * @const
     */
    "devops": "devops"
};



export default Developer;

